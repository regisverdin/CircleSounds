/////////////////////////////////Connecting with javascript//////////////////////////

interface JavaScript {
  void showRadius(int x, int y);
  void addNote(int x);
}

void bindJavascript(JavaScript js) {
  javascript = js;
}

JavaScript javascript;

//////////////////////////////////Main Processing Script////////////////////////////////////////


Circle circ;
Circle[] circs = new Circle[0];
CirclePosition[] circPosArr = new CirclePosition[0];
Beat beat;
Beat[] beatArr = new BeatArr[0];
float[] circRadArr = new float[0];
int circRad;
int xPos;
int yPos;
int circNum;
int beatPosX;
int beatPosY;
//Makes mousePressed the return val of a function. Needed b/c of bug in processingjs (can't have func and var with same name).
boolean getMousePressValue() { return mousePressed; };
boolean mouseVal = getMousePressValue();


void setup() {
  size(1000, 1000);
  stroke(255);
  ellipseMode(RADIUS);
  noFill();
  mouseVal = false;
  circNum = 0;
  key = 'c';
}


void draw() {
  background(100, 100, 100);
  //// Draws a temporary circle while holding mouse down.
  if (mouseVal == true) {
    int a = abs(xPos-mouseX);
    int b = abs(yPos-mouseY);
    circRad = int( sqrt((a*a)+(b*b)) );
    circ.drawTempCircle(xPos, yPos, circRad);
  }
  //// Updates and displays all circle objects in array.
  for (int i = 0; i < circs.length; i++ ) { 
    circs[i].drawCircle();
    console.log()
  }
  //// Displays all beats, and updates their position
  for (int i = 0; i < beatArr.length; i++ ) { 
    // console.log(i, beatArr[i].whichCircle());
    beatArr[i].incrementBeatPos();
    // int currentCircNum = beatArr[i].circNum;
    // console.log(currentCircNum);
    // int cx = circPosArr[currentCircNum].x;
    // int cy = circPosArr[currentCircNum].y;

    // float t = millis()/1000.0f;
    // int r = circRadArr[currentCircNum].circRad;
    // int x = (int)(cx+r*cos(t));
    // int y = (int)(cy+r*sin(t));

    // beatArr[i].beatX = x;
    // beatArr[i].beatY = y;

    beatArr[i].drawBeat();
  }
}

/// Need to remove mousePressed, and put this code into a few separate functions. Causes errors when I try.. get help.
void mousePressed() {
  ///// User Starts Drawing New Circle, if c (default)
  if (key == 'c') {
    circ = new Circle();
    int a = mouseX;
    int b = mouseY;
    CirclePosition circPos = new CirclePosition(a, b);
    circPosArr = (CirclePosition[]) append(circPosArr, circPos);
    console.log(circPosArr);   

    mouseVal = true;
    xPos = mouseX;
    yPos = mouseY;
  }

  //// User adds beats, if b
  if (key == 'b') {
    for (int i = 0; i < circNum; i++) {
      float a = circPosArr[i].x-mouseX;
      float b = circPosArr[i].y-mouseY;
      float c = sqrt((a*a)+(b*b));
      if ((c >= (circRadArr[i]-10) && (c <= (circRadArr[i]+10)))) {
        //FINDS POINT ON CIRCLE CLOSEST TO MOUSE CLICK
        public float angle = asin(b/circRadArr[i]);
        //angle = (angle * 180)/PI;
        // console.log(angle);
        // console.log(circRadArr[i]);
        beatPosX = int(cos(angle)*circRadArr[i]);
        beatPosY = int(sin(angle)*circRadArr[i]);
        
        // CHECK WHICH QUADRANT MOUSE IS IN, AND SET SIGN OF BEATPOS
        if (mouseX > circPosArr[i].x) {
          beatPosX = 0-beatPosX;
        }
        // REMOVE NaN values generated by asin, snap to correct location
        // if ((beatPosX==0)&&(mouseY<circRadArr[i].circRad)) {
        //   console.log("asdf");
        //   beatPosX == 0;
        //   beatPosY == -circRadArr[i];
        // }
        // if ((beatPosY==0)&&(mouseY>circRadArr[i].circRad)) {
        //   console.log("asdf");
        //   beatPosX == 0;
        //   beatPosY == circRadArr[i];
        // }
        
        beat = new Beat();

        beat.addBeat( (circPosArr[i].x - beatPosX), (circPosArr[i].y-beatPosY), i );
        beatArr = (Beat[]) append(beatArr, beat);

      }
      //      if ( ( mouseX <= ((circPosArr[i].x) + 20) ) && ( mouseX >= ((circPosArr[i].x) - 20) )    &&    ( mouseY <= ((circPosArr[i].y) + 20) ) && ( mouseY >= ((circPosArr[i].y) - 20) )) {
      //         //println("In Range");
      //         int a = mouseX;
      //         int b = mouseY;
      //         translate(mouseX-a, mouseY-b);
      //         }
    }
      // //move circle by clicking and dragging center. need to also move beats with it!
      // if (key == 'b') {
      // for (int i = 0; i < circNum; i++) {
      // println(circPosArr[i].x);
      // if ( ( mouseX <= ((circPosArr[i].x) + 20) ) && ( mouseX >= ((circPosArr[i].x) - 20) )    &&    ( mouseY <= ((circPosArr[i].y) + 20) ) && ( mouseY >= ((circPosArr[i].y) - 20) )) {}
  }  
}

  void mouseReleased() {
    /// Adds drawn circle to array
    if (key == 'c') {
      circs = (Circle[]) append(circs, circ);
      circNum++;
      circ = new Circle();
      mouseVal = false;
      
      //Add current mouse position (at RADIUS of new circle) to circRadArr
      int a = abs(xPos-mouseX);
      int b = abs(yPos-mouseY);
      float circRad = sqrt((a*a)+(b*b));
      circRadArr = append(circRadArr, circRad);
      
      javascript.addNote(circRad);
      javascript.showRadius(circRad);
    }
  }





  ///////////////////////////////////////////////////  CLASSES  //////////////////////////////////////////////////////////////////

  class Circle {
    int circleX;
    int circleY;
    int circleW;
    int circleH;

    Circle() {
    } 

    void drawTempCircle(int a, int b, int c) {
      circleX = a;
      circleY = b;
      circleW = circleH = c;
      ellipse(circleX, circleY, circleW, circleH);
    }
    void drawCircle() {
      ellipse(circleX, circleY, circleW, circleH);
    }
  }
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  class CirclePosition {
    int x;
    int y;

    CirclePosition(int a, int b) {
      x = a;
      y = b;
    }
  }


  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  class Beat {
    int beatX;
    int beatY;
    int circNum;

    Beat() {
    }

    void addBeat(int x, int y, int cNum) {
      beatX = x;
      beatY = y;
      circNum = cNum;
      console.log(circNum);
    }

    void drawBeat() {
      fill(0,256,0);
      ellipse(beatX, beatY, 3, 3);
      noFill();
    }

    int whichCircle(){
      // return circNum;
    }

    void incrementBeatPos() {
      // beatX +=1;
      // beatY +=1;

      

      // using current x y position of beat and radius of circle, get x y relative to circle
      // calculate current angle in radians
      // 2PIr = circumference
      // add a constant deltaAngle to old angle. set to new angle. scale new angle to radius of circle.
      // calculate xy pos with sin and cos.



      // move a certain amount along the circumference (start with a default rateâ€¦ distance(pixels?) per frame).



    }

  }
